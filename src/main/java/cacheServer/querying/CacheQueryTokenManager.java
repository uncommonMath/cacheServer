/* CacheQueryTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. CacheQueryTokenManager.java */
package cacheServer.querying;


/** Token Manager. */
@SuppressWarnings("all")
public class CacheQueryTokenManager implements CacheQueryConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7f0L) != 0x0L)
         {
            jjmatchedKind = 12;
            return 48;
         }
         return -1;
      case 1:
         if ((active0 & 0x7f0L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x7a0L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
            return 48;
         }
         if ((active0 & 0x50L) != 0x0L)
            return 48;
         return -1;
      case 3:
         if ((active0 & 0x680L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
            return 48;
         }
         if ((active0 & 0x120L) != 0x0L)
            return 48;
         return -1;
      case 4:
         if ((active0 & 0x480L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
            return 48;
         }
         if ((active0 & 0x200L) != 0x0L)
            return 48;
         return -1;
      case 5:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 5;
            return 48;
         }
         if ((active0 & 0x80L) != 0x0L)
            return 48;
         return -1;
      case 6:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
            return 48;
         }
         return -1;
      case 8:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 8;
            return 48;
         }
         return -1;
      case 9:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
            return 48;
         }
         return -1;
      case 10:
         if ((active0 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 10;
            return 48;
         }
         return -1;
      case 11:
         if ((active0 & 0x400L) != 0x0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x400L) != 0x0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 11);
      case '=':
         return jjStopAtPos(0, 17);
      case 'a':
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 'c':
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 'g':
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x480L);
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x100L);
      case '|':
         return jjStopAtPos(0, 18);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 'd':
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x4c0L);
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 'n':
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 'c':
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 'd':
         if ((active0 & 0x10L) != 0x0L)
            return jjStartNfaWithStates_0(2, 4, 48);
         break;
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 'm':
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 'p':
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 't':
         if ((active0 & 0x40L) != 0x0L)
            return jjStartNfaWithStates_0(2, 6, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 'h':
         if ((active0 & 0x100L) != 0x0L)
            return jjStartNfaWithStates_0(3, 8, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 'l':
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 'o':
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 't':
         if ((active0 & 0x20L) != 0x0L)
            return jjStartNfaWithStates_0(3, 5, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 'e':
         if ((active0 & 0x200L) != 0x0L)
            return jjStartNfaWithStates_0(4, 9, 48);
         break;
      case 'v':
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 'c':
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 'e':
         if ((active0 & 0x80L) != 0x0L)
            return jjStartNfaWithStates_0(5, 7, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 'e':
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 'm':
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 'e':
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 'n':
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 't':
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case ' ':
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 'b':
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 'y':
         if ((active0 & 0x400L) != 0x0L)
            return jjStopAtPos(13, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(0, 9); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(10, 18); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(19, 21); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0x0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(6, 11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(22, 29); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0x0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(6, 18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(33, 40); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0x0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(6, 23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(41, 48); }
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0x0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(6, 27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(49, 56); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(57, 63); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(64, 72); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(73, 81); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(10, 18); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(0, 9); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 35:
                  if (curChar == 46)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(39); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(43); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(47); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(82, 84); }
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(82, 84); }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(85, 86); }
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(87, 88); }
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(89, 90); }
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(91, 92); }
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(93, 94); }
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(95, 96); }
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(97, 98); }
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(99, 100); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 48 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\141\144\144", "\151\156\151\164", "\147\145\164", 
"\162\145\155\157\166\145", "\167\151\164\150", "\143\141\143\150\145", 
"\162\145\160\154\141\143\145\155\145\156\164\40\142\171", "\12", null, null, null, null, null, "\75", "\174", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   5, 6, 33, 34, 35, 40, 41, 44, 45, 31, 5, 12, 13, 6, 19, 20, 
   24, 28, 31, 6, 8, 30, 12, 13, 6, 19, 20, 24, 28, 11, 15, 6, 
   29, 12, 13, 6, 19, 20, 24, 28, 18, 12, 13, 6, 19, 20, 24, 28, 
   23, 12, 13, 6, 19, 20, 24, 27, 28, 12, 13, 6, 19, 20, 24, 28, 
   12, 13, 15, 6, 19, 20, 24, 28, 29, 12, 13, 6, 8, 19, 20, 24, 
   28, 30, 5, 6, 31, 3, 4, 9, 10, 16, 17, 21, 22, 25, 26, 38, 
   39, 42, 43, 46, 47, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try {
     input_stream.backup(0);
      while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0x0L)
         curChar = input_stream.beginToken();
   }
   catch (final java.io.IOException e1) {
     continue EOFLoop;
   }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try {
     input_stream.readChar();
     input_stream.backup(1);
   }
   catch (final java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.getImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.getImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CacheQueryTokenManager(SimpleCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public CacheQueryTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x6fff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[48];
    private final int[] jjstateSet = new int[2 * 48];
    private final StringBuilder jjimage = new StringBuilder();
    private final StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
