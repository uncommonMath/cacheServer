/* CacheQuery.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. CacheQuery.java */
package cacheServer.querying;

import cacheServer.core.CacheManager;
import cacheServer.core.CacheRequestBuilder;
import cacheServer.property.PropertyName;
import cacheServer.property.typing.PropertyRawValue;
import cacheServer.property.typing.PropertyTypeRepository;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

@SuppressWarnings("all")
public class CacheQuery implements CacheQueryConstants {
    private static CacheManager cacheManager;

    private static Object result;

    @java.lang.SuppressWarnings("RedundantThrows")
    public static Object executeQuery(CacheManager cacheManager, String query) throws ParseException
    {
        CacheQuery parser = new CacheQuery(new ByteArrayInputStream(query.getBytes(StandardCharsets.UTF_8)), "utf-8");
        CacheQuery.cacheManager = cacheManager;
        parser.parseCommand();
        return CacheQuery.result;
    }

  final public void parseCommand() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
      add();
      break;
      }
    case INIT:{
      jj_consume_token(INIT);
      init();
      break;
      }
    case GET:{
      jj_consume_token(GET);
      get();
      break;
      }
    case REMOVE:{
      jj_consume_token(REMOVE);
      remove();
      break;
      }
    case EOL:{
      jj_consume_token(EOL);
      break;
      }
    case 0:{
      jj_consume_token(0);
System.exit(-1);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void add() throws ParseException {CacheRequestBuilder builder = CacheQuery.cacheManager.beginAdd();
  Token name, value;
    jj_consume_token(WITH);
    label_1:
    while (true) {
      name = jj_consume_token(ID);
      jj_consume_token(17);
      value = jj_consume_token(ID);
      addBuilder(builder, name, value);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ID:{
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
result = builder.end();
}

  final public void addBuilder(CacheRequestBuilder builder, Token name, Token value) throws ParseException {
builder.with(new PropertyName(name.toString()), new PropertyRawValue(value.toString()));
}

  final public void init() throws ParseException {CacheRequestBuilder builder = CacheQuery.cacheManager.beginInit();
  Token type, name;
    jj_consume_token(CACHE);
    jj_consume_token(WITH);
    label_2:
    while (true) {
      type = jj_consume_token(ID);
      name = jj_consume_token(ID);
      initBuilder(builder, type, name);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ID:{
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(18);
    jj_consume_token(REPLACEMENT);
    name = jj_consume_token(ID);
    replaceForBuilder(builder, name);
result = builder.end();
}

  final public void initBuilder(CacheRequestBuilder builder, Token type, Token name) throws ParseException {
builder.with(PropertyTypeRepository.PROPERTY_TYPE_REPOSITORY.get(type.toString()), new PropertyName(name.toString()));
}

  final public void replaceForBuilder(CacheRequestBuilder builder, Token name) throws ParseException {
builder.with(new PropertyName(name.toString()));
}

  final public void get() throws ParseException {CacheRequestBuilder builder = CacheQuery.cacheManager.beginGet();
  Token value, name;
    jj_consume_token(WITH);
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ID:{
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      name = jj_consume_token(ID);
      jj_consume_token(17);
      value = jj_consume_token(ID);
      getBuilder(builder, name, value);
    }
result = builder.end();
}

  final public void getBuilder(CacheRequestBuilder builder, Token name, Token value) throws ParseException {
builder.with(new PropertyName(name.toString()), new PropertyRawValue(value.toString()));
}

  final public void remove() throws ParseException {CacheRequestBuilder builder = CacheQuery.cacheManager.beginRemove();
  Token value, name;
    jj_consume_token(WITH);
    label_4:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ID:{
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      name = jj_consume_token(ID);
      jj_consume_token(17);
      value = jj_consume_token(ID);
      removeBuilder(builder, name, value);
    }
result = builder.end();
}

  final public void removeBuilder(CacheRequestBuilder builder, Token name, Token value) throws ParseException {
builder.with(new PropertyName(name.toString()), new PropertyRawValue(value.toString()));
}

  /** Generated Token Manager. */
  public CacheQueryTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8f1,0x1000,0x1000,0x1000,0x1000,};
	}

  /**
   * Constructor with InputStream.
   * @param stream input stream
   */
  public CacheQuery(final java.io.InputStream stream) {
	  this(stream, null);
  }

  /**
   * Constructor with InputStream and supplied encoding
   * @param stream input stream
   * @param encoding charset to be used
   */
  public CacheQuery(final java.io.InputStream stream, final String encoding) {
   try {
     jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
   } catch(final java.io.UnsupportedEncodingException e) {
     throw new IllegalStateException(e);
   }
	 token_source = new CacheQueryTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream input stream
   */
  public void ReInit(final java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /**
   * Reinitialise
   * @param stream input stream
   * @param encoding charset to be used
   */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
	  try {
      jj_input_stream.reInit(stream, encoding, 1, 1);
    } catch(final java.io.UnsupportedEncodingException e) { 
      throw new IllegalStateException(e);
    }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public CacheQuery(final java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CacheQueryTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 5; i++)
     jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final java.io.Reader stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new CacheQueryTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 5; i++)
     jj_la1[i] = -1;
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public CacheQuery(final CacheQueryTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final CacheQueryTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private final java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

}
